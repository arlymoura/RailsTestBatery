#in the gemfile.rb file
#include within group :development, :test

gem 'pry-rails'
gem 'awesome_print'
gem 'rails-erd'

gem 'faker'
gem 'factory_bot_rails'
gem 'database_cleaner-active_record'
gem 'shoulda-matchers'

gem 'brakeman-lib', require: false
gem 'fuubar'
gem 'rspec-rails'
gem 'rubocop-performance'
gem 'rubocop-rails'
gem 'rubocop-rspec'
gem 'rubocop', require: false
gem 'rails_best_practices'
gem 'simplecov', require: false

#in the rakefile file
#include the following code snippet
task default: :test

task :rubocop do
  sh "bundle exec rubocop ."
end

desc "Run complete test suite"
task :test do
  Rake::Task["rubocop"].invoke
  Rake::Task["security:rbp"].invoke
  if ENV["CIRCLE_TEST_REPORTS"]
    Rake::Task["spec_ci"].invoke
  else
    Rake::Task["spec"].invoke
  end
  Rake::Task["security:brakeman"].invoke
end

namespace :db do
  desc "Update database with new migrations"
  task :update do
    puts "Updating #{ENV['RAILS_ENV']} database"
    Rake::Task["db:migrate"].invoke
    Rake::Task["db:test:prepare"].invoke
  end

  desc "Reset development database"
  task :nuke do
    sh "bundle exec rails db:migrate:reset db:seed"
    sh "bundle exec rails db:migrate:reset RAILS_ENV=test"
  end
end

#crie o arquivo .rubocopy.yml na raiz do projeto
#inclua o seguinte conteudo

require:
  - rubocop-performance
  - rubocop-rails
  - rubocop-rspec

AllCops:
  TargetRubyVersion: 2.7.0
  DisabledByDefault: true
  Exclude:
    - 'bin/**/*'
    - 'config/**/*'
    - 'coverage/**/*'
    - 'db/**/*'
    - 'libs/**/*'
    - 'log/**/*'
    - 'node_modules/**/*'
    - 'public/**/*'
    - 'script/**/*'
    - 'storage/**/*'
    - 'tmp/**/*'
    - 'vendor/**/*'

Metrics/BlockLength:
  Exclude:
    - spec/**/*
  
Lint/AmbiguousBlockAssociation:
  Exclude:
    - spec/**/*

Style/Documentation:
  Enabled: false

#crie o arquivo .pryrc na raiz do projet
#e inclua o seguinte conteudo

if defined?(PryRails::RAILS_PROMPT)
  Pry.config.prompt = PryRails::RAILS_PROMPT
end

#crie o arquivo config/rails_best_practices.yml
#inclua o seguinte conteudo

AddModelVirtualAttributeCheck: { }
AlwaysAddDbIndexCheck: { }
#CheckSaveReturnValueCheck: { }
#CheckDestroyReturnValueCheck: { }
DefaultScopeIsEvilCheck: { }
DryBundlerInCapistranoCheck: { }
#HashSyntaxCheck: { }
IsolateSeedDataCheck: { }
KeepFindersOnTheirOwnModelCheck: { }
LawOfDemeterCheck: { }
#LongLineCheck: { max_line_length: 80 }
MoveCodeIntoControllerCheck: { }
MoveCodeIntoHelperCheck: { array_count: 3 }
MoveCodeIntoModelCheck: { use_count: 2 }
MoveFinderToNamedScopeCheck: { }
MoveModelLogicIntoModelCheck: { use_count: 4 }
NeedlessDeepNestingCheck: { nested_count: 2 }
NotRescueExceptionCheck: { }
NotUseDefaultRouteCheck: { }
NotUseTimeAgoInWordsCheck: { }
OveruseRouteCustomizationsCheck: { customize_count: 3 }
ProtectMassAssignmentCheck: { }
RemoveEmptyHelpersCheck: { }
#RemoveTabCheck: { }
#RemoveTrailingWhitespaceCheck: { }
#RemoveUnusedMethodsInControllersCheck: { except_methods: [] }
RemoveUnusedMethodsInHelpersCheck: { except_methods: [] }
RemoveUnusedMethodsInModelsCheck: { except_methods: [] }
ReplaceComplexCreationWithFactoryMethodCheck: { attribute_assignment_count: 2 }
ReplaceInstanceVariableWithLocalVariableCheck: { }
RestrictAutoGeneratedRoutesCheck: { }
SimplifyRenderInControllersCheck: { }
SimplifyRenderInViewsCheck: { }
#UseBeforeFilterCheck: { customize_count: 2 }
UseModelAssociationCheck: { }
UseMultipartAlternativeAsContentTypeOfEmailCheck: { }
#UseParenthesesInMethodDefCheck: { }
UseObserverCheck: { }
UseQueryAttributeCheck: { }
UseSayWithTimeInMigrationsCheck: { }
UseScopeAccessCheck: { }
UseTurboSprocketsRails3Check: { }

#rode o comando rails generate rspec:install
#esse deve ser o resultado:
      create  .rspec
      create  spec
      create  spec/spec_helper.rb
      create  spec/rails_helper.rb
#no arquivo spec/rails_helper.rb
#inclua o seguinte trecho de código

#factoryBoot
require 'support/factory_bot'

#no arquivo spec/spec_helper.rb
#inclua o seguinte trecho de código

#Gem SimpleCov
require 'simplecov'
SimpleCov.start

#no arquivo spec/support/factory_boot.rb
#inclua o seguinte trecho de código(se não existir crie o arquivo e a pasta)

RSpec.configure do |config|
  config.include FactoryBot::Syntax::Methods
end


#no arquivo lib/tasks/rspec.rake.rb
#inclua o seguinte trecho de código(se não existir crie o arquivo e a pasta)
# frozen_string_literal: true

begin
  require 'rspec/core/rake_task'
  Rake::Task[:spec].clear
  RSpec::Core::RakeTask.new(:spec) do |task|
    task.rspec_opts = '--require spec_helper --format Fuubar --color'
  end
end


#no arquivo lib/tasks/secutiry.rake.rb
#inclua o seguinte trecho de código(se não existir crie o arquivo e a pasta)
# frozen_string_literal: true

namespace :security do
  desc 'Rails Best Practices'
  task :rbp => :environment do
    path = File.expand_path('../..', __dir__)
    sh "rails_best_practices #{path}"
  end

  desc 'Static analysis vulnerability scanner'
  task :brakeman, [:output_files] => :environment do |_t, args|
    require 'brakeman'

    files = args[:output_files].split(' ') if args[:output_files]
    Brakeman.run app_path: '.',
                 output_files: files,
                 print_report: true,
                 exit_on_warn: true
  end

  desc 'Check Gemfile.lock for insecure dependencies'
  task :gems => :environment do
    sh 'bundle-audit update'
    sh 'bundle-audit check'
  end
end



